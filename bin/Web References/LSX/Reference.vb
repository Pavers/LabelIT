'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.269
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
'
Namespace LSX
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="LSXSoap", [Namespace]:="http://tempuri.org/LabelService/LSX")>  _
    Partial Public Class LSX
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetDeliveryDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetManualDeliveryDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isConnectionActiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBarcode1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBarcodesByProductNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckServiceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SearchProductWildcardsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLabelFormatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLabelFormatsByTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLabelFormatTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLabelFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLabelFormatImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLabelFormatNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReductionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReductionDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReductionWithStockByBranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReductionWithStockByBranchWithAltCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRmisReductionIDFromReductionNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReductionSheetNumbersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBranchStockFromBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://212.250.100.5/LabelService/LSX.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetDeliveryDetailsCompleted As GetDeliveryDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetManualDeliveryDetailsCompleted As GetManualDeliveryDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event isConnectionActiveCompleted As isConnectionActiveCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBarcodeCompleted As CheckBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBarcode1Completed As CheckBarcode1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetBarcodesByProductNameCompleted As GetBarcodesByProductNameCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckServiceCompleted As CheckServiceCompletedEventHandler
        
        '''<remarks/>
        Public Event SearchProductWildcardsCompleted As SearchProductWildcardsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLabelFormatsCompleted As GetLabelFormatsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLabelFormatsByTypeCompleted As GetLabelFormatsByTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event getLabelFormatTypeCompleted As getLabelFormatTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLabelFormatCompleted As GetLabelFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLabelFormatImageCompleted As GetLabelFormatImageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLabelFormatNameCompleted As GetLabelFormatNameCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertFormatCompleted As InsertFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFormatCompleted As UpdateFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFormatCompleted As DeleteFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReductionsCompleted As GetReductionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReductionDetailCompleted As GetReductionDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReductionWithStockByBranchCompleted As GetReductionWithStockByBranchCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReductionWithStockByBranchWithAltCodeCompleted As GetReductionWithStockByBranchWithAltCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRmisReductionIDFromReductionNameCompleted As GetRmisReductionIDFromReductionNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReductionSheetNumbersCompleted As GetReductionSheetNumbersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBranchStockFromBarcodeCompleted As GetBranchStockFromBarcodeCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetDeliveryDetails", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeliveryDetails(ByVal DespatchDate As Date, ByVal BranchCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDeliveryDetails", New Object() {DespatchDate, BranchCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDeliveryDetails(ByVal DespatchDate As Date, ByVal BranchCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDeliveryDetails", New Object() {DespatchDate, BranchCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDeliveryDetails(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeliveryDetailsAsync(ByVal DespatchDate As Date, ByVal BranchCode As String)
            Me.GetDeliveryDetailsAsync(DespatchDate, BranchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeliveryDetailsAsync(ByVal DespatchDate As Date, ByVal BranchCode As String, ByVal userState As Object)
            If (Me.GetDeliveryDetailsOperationCompleted Is Nothing) Then
                Me.GetDeliveryDetailsOperationCompleted = AddressOf Me.OnGetDeliveryDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetDeliveryDetails", New Object() {DespatchDate, BranchCode}, Me.GetDeliveryDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeliveryDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeliveryDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeliveryDetailsCompleted(Me, New GetDeliveryDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetManualDeliveryDetails", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetManualDeliveryDetails(ByVal DespatchDate As Date, ByVal BranchCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetManualDeliveryDetails", New Object() {DespatchDate, BranchCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetManualDeliveryDetails(ByVal DespatchDate As Date, ByVal BranchCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetManualDeliveryDetails", New Object() {DespatchDate, BranchCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetManualDeliveryDetails(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetManualDeliveryDetailsAsync(ByVal DespatchDate As Date, ByVal BranchCode As String)
            Me.GetManualDeliveryDetailsAsync(DespatchDate, BranchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetManualDeliveryDetailsAsync(ByVal DespatchDate As Date, ByVal BranchCode As String, ByVal userState As Object)
            If (Me.GetManualDeliveryDetailsOperationCompleted Is Nothing) Then
                Me.GetManualDeliveryDetailsOperationCompleted = AddressOf Me.OnGetManualDeliveryDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetManualDeliveryDetails", New Object() {DespatchDate, BranchCode}, Me.GetManualDeliveryDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetManualDeliveryDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetManualDeliveryDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetManualDeliveryDetailsCompleted(Me, New GetManualDeliveryDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/isConnectionActive", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isConnectionActive() As Integer
            Dim results() As Object = Me.Invoke("isConnectionActive", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginisConnectionActive(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("isConnectionActive", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndisConnectionActive(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isConnectionActiveAsync()
            Me.isConnectionActiveAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isConnectionActiveAsync(ByVal userState As Object)
            If (Me.isConnectionActiveOperationCompleted Is Nothing) Then
                Me.isConnectionActiveOperationCompleted = AddressOf Me.OnisConnectionActiveOperationCompleted
            End If
            Me.InvokeAsync("isConnectionActive", New Object(-1) {}, Me.isConnectionActiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnisConnectionActiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.isConnectionActiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isConnectionActiveCompleted(Me, New isConnectionActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/CheckBarcode", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CheckBarcode(ByVal Barcode As String) As Product
            Dim results() As Object = Me.Invoke("CheckBarcode", New Object() {Barcode})
            Return CType(results(0),Product)
        End Function
        
        '''<remarks/>
        Public Function BeginCheckBarcode(ByVal Barcode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CheckBarcode", New Object() {Barcode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCheckBarcode(ByVal asyncResult As System.IAsyncResult) As Product
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Product)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeAsync(ByVal Barcode As String)
            Me.CheckBarcodeAsync(Barcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeAsync(ByVal Barcode As String, ByVal userState As Object)
            If (Me.CheckBarcodeOperationCompleted Is Nothing) Then
                Me.CheckBarcodeOperationCompleted = AddressOf Me.OnCheckBarcodeOperationCompleted
            End If
            Me.InvokeAsync("CheckBarcode", New Object() {Barcode}, Me.CheckBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBarcodeCompleted(Me, New CheckBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="CheckBarcode1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/CheckBarcodeEuro", RequestElementName:="CheckBarcodeEuro", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseElementName:="CheckBarcodeEuroResponse", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CheckBarcode(ByVal Barcode As String, ByVal BranchCode As String) As <System.Xml.Serialization.XmlElementAttribute("CheckBarcodeEuroResult")> Product
            Dim results() As Object = Me.Invoke("CheckBarcode1", New Object() {Barcode, BranchCode})
            Return CType(results(0),Product)
        End Function
        
        '''<remarks/>
        Public Function BeginCheckBarcode1(ByVal Barcode As String, ByVal BranchCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CheckBarcode1", New Object() {Barcode, BranchCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCheckBarcode1(ByVal asyncResult As System.IAsyncResult) As Product
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Product)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBarcode1Async(ByVal Barcode As String, ByVal BranchCode As String)
            Me.CheckBarcode1Async(Barcode, BranchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBarcode1Async(ByVal Barcode As String, ByVal BranchCode As String, ByVal userState As Object)
            If (Me.CheckBarcode1OperationCompleted Is Nothing) Then
                Me.CheckBarcode1OperationCompleted = AddressOf Me.OnCheckBarcode1OperationCompleted
            End If
            Me.InvokeAsync("CheckBarcode1", New Object() {Barcode, BranchCode}, Me.CheckBarcode1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBarcode1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBarcode1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBarcode1Completed(Me, New CheckBarcode1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetBarcodesByProductName", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBarcodesByProductName(ByVal ProductName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBarcodesByProductName", New Object() {ProductName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetBarcodesByProductName(ByVal ProductName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetBarcodesByProductName", New Object() {ProductName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetBarcodesByProductName(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBarcodesByProductNameAsync(ByVal ProductName As String)
            Me.GetBarcodesByProductNameAsync(ProductName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBarcodesByProductNameAsync(ByVal ProductName As String, ByVal userState As Object)
            If (Me.GetBarcodesByProductNameOperationCompleted Is Nothing) Then
                Me.GetBarcodesByProductNameOperationCompleted = AddressOf Me.OnGetBarcodesByProductNameOperationCompleted
            End If
            Me.InvokeAsync("GetBarcodesByProductName", New Object() {ProductName}, Me.GetBarcodesByProductNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBarcodesByProductNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBarcodesByProductNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBarcodesByProductNameCompleted(Me, New GetBarcodesByProductNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/CheckService", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckService() As Integer
            Dim results() As Object = Me.Invoke("CheckService", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginCheckService(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CheckService", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCheckService(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckServiceAsync()
            Me.CheckServiceAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckServiceAsync(ByVal userState As Object)
            If (Me.CheckServiceOperationCompleted Is Nothing) Then
                Me.CheckServiceOperationCompleted = AddressOf Me.OnCheckServiceOperationCompleted
            End If
            Me.InvokeAsync("CheckService", New Object(-1) {}, Me.CheckServiceOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckServiceOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckServiceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckServiceCompleted(Me, New CheckServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/SearchProductWildcards", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SearchProductWildcards(ByVal ProductName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SearchProductWildcards", New Object() {ProductName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginSearchProductWildcards(ByVal ProductName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SearchProductWildcards", New Object() {ProductName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSearchProductWildcards(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SearchProductWildcardsAsync(ByVal ProductName As String)
            Me.SearchProductWildcardsAsync(ProductName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SearchProductWildcardsAsync(ByVal ProductName As String, ByVal userState As Object)
            If (Me.SearchProductWildcardsOperationCompleted Is Nothing) Then
                Me.SearchProductWildcardsOperationCompleted = AddressOf Me.OnSearchProductWildcardsOperationCompleted
            End If
            Me.InvokeAsync("SearchProductWildcards", New Object() {ProductName}, Me.SearchProductWildcardsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearchProductWildcardsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SearchProductWildcardsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SearchProductWildcardsCompleted(Me, New SearchProductWildcardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetLabelFormats", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLabelFormats() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLabelFormats", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLabelFormats(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLabelFormats", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLabelFormats(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatsAsync()
            Me.GetLabelFormatsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatsAsync(ByVal userState As Object)
            If (Me.GetLabelFormatsOperationCompleted Is Nothing) Then
                Me.GetLabelFormatsOperationCompleted = AddressOf Me.OnGetLabelFormatsOperationCompleted
            End If
            Me.InvokeAsync("GetLabelFormats", New Object(-1) {}, Me.GetLabelFormatsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLabelFormatsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLabelFormatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLabelFormatsCompleted(Me, New GetLabelFormatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetLabelFormatsByType", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLabelFormatsByType(ByVal FormatType As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLabelFormatsByType", New Object() {FormatType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLabelFormatsByType(ByVal FormatType As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLabelFormatsByType", New Object() {FormatType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLabelFormatsByType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatsByTypeAsync(ByVal FormatType As Integer)
            Me.GetLabelFormatsByTypeAsync(FormatType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatsByTypeAsync(ByVal FormatType As Integer, ByVal userState As Object)
            If (Me.GetLabelFormatsByTypeOperationCompleted Is Nothing) Then
                Me.GetLabelFormatsByTypeOperationCompleted = AddressOf Me.OnGetLabelFormatsByTypeOperationCompleted
            End If
            Me.InvokeAsync("GetLabelFormatsByType", New Object() {FormatType}, Me.GetLabelFormatsByTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLabelFormatsByTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLabelFormatsByTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLabelFormatsByTypeCompleted(Me, New GetLabelFormatsByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/getLabelFormatType", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLabelFormatType(ByVal LabelID As Integer) As Integer
            Dim results() As Object = Me.Invoke("getLabelFormatType", New Object() {LabelID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BegingetLabelFormatType(ByVal LabelID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getLabelFormatType", New Object() {LabelID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetLabelFormatType(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLabelFormatTypeAsync(ByVal LabelID As Integer)
            Me.getLabelFormatTypeAsync(LabelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLabelFormatTypeAsync(ByVal LabelID As Integer, ByVal userState As Object)
            If (Me.getLabelFormatTypeOperationCompleted Is Nothing) Then
                Me.getLabelFormatTypeOperationCompleted = AddressOf Me.OngetLabelFormatTypeOperationCompleted
            End If
            Me.InvokeAsync("getLabelFormatType", New Object() {LabelID}, Me.getLabelFormatTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLabelFormatTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLabelFormatTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLabelFormatTypeCompleted(Me, New getLabelFormatTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetLabelFormat", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLabelFormat(ByVal FormatID As Integer) As String
            Dim results() As Object = Me.Invoke("GetLabelFormat", New Object() {FormatID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLabelFormat(ByVal FormatID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLabelFormat", New Object() {FormatID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLabelFormat(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatAsync(ByVal FormatID As Integer)
            Me.GetLabelFormatAsync(FormatID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatAsync(ByVal FormatID As Integer, ByVal userState As Object)
            If (Me.GetLabelFormatOperationCompleted Is Nothing) Then
                Me.GetLabelFormatOperationCompleted = AddressOf Me.OnGetLabelFormatOperationCompleted
            End If
            Me.InvokeAsync("GetLabelFormat", New Object() {FormatID}, Me.GetLabelFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLabelFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLabelFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLabelFormatCompleted(Me, New GetLabelFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetLabelFormatImage", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLabelFormatImage(ByVal FormatID As Integer) As ImageData
            Dim results() As Object = Me.Invoke("GetLabelFormatImage", New Object() {FormatID})
            Return CType(results(0),ImageData)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLabelFormatImage(ByVal FormatID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLabelFormatImage", New Object() {FormatID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLabelFormatImage(ByVal asyncResult As System.IAsyncResult) As ImageData
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ImageData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatImageAsync(ByVal FormatID As Integer)
            Me.GetLabelFormatImageAsync(FormatID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatImageAsync(ByVal FormatID As Integer, ByVal userState As Object)
            If (Me.GetLabelFormatImageOperationCompleted Is Nothing) Then
                Me.GetLabelFormatImageOperationCompleted = AddressOf Me.OnGetLabelFormatImageOperationCompleted
            End If
            Me.InvokeAsync("GetLabelFormatImage", New Object() {FormatID}, Me.GetLabelFormatImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLabelFormatImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLabelFormatImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLabelFormatImageCompleted(Me, New GetLabelFormatImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetLabelFormatName", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLabelFormatName(ByVal FormatID As Integer) As String
            Dim results() As Object = Me.Invoke("GetLabelFormatName", New Object() {FormatID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLabelFormatName(ByVal FormatID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLabelFormatName", New Object() {FormatID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLabelFormatName(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatNameAsync(ByVal FormatID As Integer)
            Me.GetLabelFormatNameAsync(FormatID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLabelFormatNameAsync(ByVal FormatID As Integer, ByVal userState As Object)
            If (Me.GetLabelFormatNameOperationCompleted Is Nothing) Then
                Me.GetLabelFormatNameOperationCompleted = AddressOf Me.OnGetLabelFormatNameOperationCompleted
            End If
            Me.InvokeAsync("GetLabelFormatName", New Object() {FormatID}, Me.GetLabelFormatNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLabelFormatNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLabelFormatNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLabelFormatNameCompleted(Me, New GetLabelFormatNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/InsertFormat", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertFormat(ByVal FormatImageID As Integer, ByVal FormatName As String, ByVal Format As String, ByVal FormatType As Integer) As Integer
            Dim results() As Object = Me.Invoke("InsertFormat", New Object() {FormatImageID, FormatName, Format, FormatType})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginInsertFormat(ByVal FormatImageID As Integer, ByVal FormatName As String, ByVal Format As String, ByVal FormatType As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("InsertFormat", New Object() {FormatImageID, FormatName, Format, FormatType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndInsertFormat(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertFormatAsync(ByVal FormatImageID As Integer, ByVal FormatName As String, ByVal Format As String, ByVal FormatType As Integer)
            Me.InsertFormatAsync(FormatImageID, FormatName, Format, FormatType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertFormatAsync(ByVal FormatImageID As Integer, ByVal FormatName As String, ByVal Format As String, ByVal FormatType As Integer, ByVal userState As Object)
            If (Me.InsertFormatOperationCompleted Is Nothing) Then
                Me.InsertFormatOperationCompleted = AddressOf Me.OnInsertFormatOperationCompleted
            End If
            Me.InvokeAsync("InsertFormat", New Object() {FormatImageID, FormatName, Format, FormatType}, Me.InsertFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertFormatCompleted(Me, New InsertFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/UpdateFormat", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFormat(ByVal FormatID As Integer, ByVal FormatName As String, ByVal format As String, ByVal FormatType As Integer) As Integer
            Dim results() As Object = Me.Invoke("UpdateFormat", New Object() {FormatID, FormatName, format, FormatType})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateFormat(ByVal FormatID As Integer, ByVal FormatName As String, ByVal format As String, ByVal FormatType As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateFormat", New Object() {FormatID, FormatName, format, FormatType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateFormat(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFormatAsync(ByVal FormatID As Integer, ByVal FormatName As String, ByVal format As String, ByVal FormatType As Integer)
            Me.UpdateFormatAsync(FormatID, FormatName, format, FormatType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFormatAsync(ByVal FormatID As Integer, ByVal FormatName As String, ByVal format As String, ByVal FormatType As Integer, ByVal userState As Object)
            If (Me.UpdateFormatOperationCompleted Is Nothing) Then
                Me.UpdateFormatOperationCompleted = AddressOf Me.OnUpdateFormatOperationCompleted
            End If
            Me.InvokeAsync("UpdateFormat", New Object() {FormatID, FormatName, format, FormatType}, Me.UpdateFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFormatCompleted(Me, New UpdateFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/DeleteFormat", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFormat(ByVal FormatID As Integer) As Integer
            Dim results() As Object = Me.Invoke("DeleteFormat", New Object() {FormatID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteFormat(ByVal FormatID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteFormat", New Object() {FormatID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteFormat(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFormatAsync(ByVal FormatID As Integer)
            Me.DeleteFormatAsync(FormatID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFormatAsync(ByVal FormatID As Integer, ByVal userState As Object)
            If (Me.DeleteFormatOperationCompleted Is Nothing) Then
                Me.DeleteFormatOperationCompleted = AddressOf Me.OnDeleteFormatOperationCompleted
            End If
            Me.InvokeAsync("DeleteFormat", New Object() {FormatID}, Me.DeleteFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFormatCompleted(Me, New DeleteFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetReductions", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReductions(ByVal LastReductionID As Integer, ByVal BranchCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReductions", New Object() {LastReductionID, BranchCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReductions(ByVal LastReductionID As Integer, ByVal BranchCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReductions", New Object() {LastReductionID, BranchCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReductions(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReductionsAsync(ByVal LastReductionID As Integer, ByVal BranchCode As String)
            Me.GetReductionsAsync(LastReductionID, BranchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReductionsAsync(ByVal LastReductionID As Integer, ByVal BranchCode As String, ByVal userState As Object)
            If (Me.GetReductionsOperationCompleted Is Nothing) Then
                Me.GetReductionsOperationCompleted = AddressOf Me.OnGetReductionsOperationCompleted
            End If
            Me.InvokeAsync("GetReductions", New Object() {LastReductionID, BranchCode}, Me.GetReductionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReductionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReductionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReductionsCompleted(Me, New GetReductionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetReductionDetail", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReductionDetail(ByVal ReductionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReductionDetail", New Object() {ReductionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReductionDetail(ByVal ReductionID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReductionDetail", New Object() {ReductionID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReductionDetail(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReductionDetailAsync(ByVal ReductionID As Integer)
            Me.GetReductionDetailAsync(ReductionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReductionDetailAsync(ByVal ReductionID As Integer, ByVal userState As Object)
            If (Me.GetReductionDetailOperationCompleted Is Nothing) Then
                Me.GetReductionDetailOperationCompleted = AddressOf Me.OnGetReductionDetailOperationCompleted
            End If
            Me.InvokeAsync("GetReductionDetail", New Object() {ReductionID}, Me.GetReductionDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReductionDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReductionDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReductionDetailCompleted(Me, New GetReductionDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetReductionWithStockByBranch", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReductionWithStockByBranch(ByVal ReductionID As Integer, ByVal branchCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReductionWithStockByBranch", New Object() {ReductionID, branchCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReductionWithStockByBranch(ByVal ReductionID As Integer, ByVal branchCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReductionWithStockByBranch", New Object() {ReductionID, branchCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReductionWithStockByBranch(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReductionWithStockByBranchAsync(ByVal ReductionID As Integer, ByVal branchCode As String)
            Me.GetReductionWithStockByBranchAsync(ReductionID, branchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReductionWithStockByBranchAsync(ByVal ReductionID As Integer, ByVal branchCode As String, ByVal userState As Object)
            If (Me.GetReductionWithStockByBranchOperationCompleted Is Nothing) Then
                Me.GetReductionWithStockByBranchOperationCompleted = AddressOf Me.OnGetReductionWithStockByBranchOperationCompleted
            End If
            Me.InvokeAsync("GetReductionWithStockByBranch", New Object() {ReductionID, branchCode}, Me.GetReductionWithStockByBranchOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReductionWithStockByBranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReductionWithStockByBranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReductionWithStockByBranchCompleted(Me, New GetReductionWithStockByBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetReductionWithStockByBranchWithAltCode", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReductionWithStockByBranchWithAltCode(ByVal ReductionID As Integer, ByVal branchCode As String, ByVal AltCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReductionWithStockByBranchWithAltCode", New Object() {ReductionID, branchCode, AltCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReductionWithStockByBranchWithAltCode(ByVal ReductionID As Integer, ByVal branchCode As String, ByVal AltCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReductionWithStockByBranchWithAltCode", New Object() {ReductionID, branchCode, AltCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReductionWithStockByBranchWithAltCode(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReductionWithStockByBranchWithAltCodeAsync(ByVal ReductionID As Integer, ByVal branchCode As String, ByVal AltCode As String)
            Me.GetReductionWithStockByBranchWithAltCodeAsync(ReductionID, branchCode, AltCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReductionWithStockByBranchWithAltCodeAsync(ByVal ReductionID As Integer, ByVal branchCode As String, ByVal AltCode As String, ByVal userState As Object)
            If (Me.GetReductionWithStockByBranchWithAltCodeOperationCompleted Is Nothing) Then
                Me.GetReductionWithStockByBranchWithAltCodeOperationCompleted = AddressOf Me.OnGetReductionWithStockByBranchWithAltCodeOperationCompleted
            End If
            Me.InvokeAsync("GetReductionWithStockByBranchWithAltCode", New Object() {ReductionID, branchCode, AltCode}, Me.GetReductionWithStockByBranchWithAltCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReductionWithStockByBranchWithAltCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReductionWithStockByBranchWithAltCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReductionWithStockByBranchWithAltCodeCompleted(Me, New GetReductionWithStockByBranchWithAltCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetRmisReductionIDFromReductionName", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRmisReductionIDFromReductionName(ByVal RmisReduction As String) As Integer
            Dim results() As Object = Me.Invoke("GetRmisReductionIDFromReductionName", New Object() {RmisReduction})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRmisReductionIDFromReductionName(ByVal RmisReduction As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRmisReductionIDFromReductionName", New Object() {RmisReduction}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRmisReductionIDFromReductionName(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRmisReductionIDFromReductionNameAsync(ByVal RmisReduction As String)
            Me.GetRmisReductionIDFromReductionNameAsync(RmisReduction, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRmisReductionIDFromReductionNameAsync(ByVal RmisReduction As String, ByVal userState As Object)
            If (Me.GetRmisReductionIDFromReductionNameOperationCompleted Is Nothing) Then
                Me.GetRmisReductionIDFromReductionNameOperationCompleted = AddressOf Me.OnGetRmisReductionIDFromReductionNameOperationCompleted
            End If
            Me.InvokeAsync("GetRmisReductionIDFromReductionName", New Object() {RmisReduction}, Me.GetRmisReductionIDFromReductionNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRmisReductionIDFromReductionNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRmisReductionIDFromReductionNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRmisReductionIDFromReductionNameCompleted(Me, New GetRmisReductionIDFromReductionNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetReductionSheetNumbers", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReductionSheetNumbers(ByVal LastReductionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReductionSheetNumbers", New Object() {LastReductionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReductionSheetNumbers(ByVal LastReductionID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReductionSheetNumbers", New Object() {LastReductionID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReductionSheetNumbers(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReductionSheetNumbersAsync(ByVal LastReductionID As Integer)
            Me.GetReductionSheetNumbersAsync(LastReductionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReductionSheetNumbersAsync(ByVal LastReductionID As Integer, ByVal userState As Object)
            If (Me.GetReductionSheetNumbersOperationCompleted Is Nothing) Then
                Me.GetReductionSheetNumbersOperationCompleted = AddressOf Me.OnGetReductionSheetNumbersOperationCompleted
            End If
            Me.InvokeAsync("GetReductionSheetNumbers", New Object() {LastReductionID}, Me.GetReductionSheetNumbersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReductionSheetNumbersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReductionSheetNumbersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReductionSheetNumbersCompleted(Me, New GetReductionSheetNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LabelService/LSX/GetBranchStockFromBarcode", RequestNamespace:="http://tempuri.org/LabelService/LSX", ResponseNamespace:="http://tempuri.org/LabelService/LSX", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBranchStockFromBarcode(ByVal Barcode As String, ByVal Branch As String) As Integer
            Dim results() As Object = Me.Invoke("GetBranchStockFromBarcode", New Object() {Barcode, Branch})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetBranchStockFromBarcode(ByVal Barcode As String, ByVal Branch As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetBranchStockFromBarcode", New Object() {Barcode, Branch}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetBranchStockFromBarcode(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBranchStockFromBarcodeAsync(ByVal Barcode As String, ByVal Branch As String)
            Me.GetBranchStockFromBarcodeAsync(Barcode, Branch, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBranchStockFromBarcodeAsync(ByVal Barcode As String, ByVal Branch As String, ByVal userState As Object)
            If (Me.GetBranchStockFromBarcodeOperationCompleted Is Nothing) Then
                Me.GetBranchStockFromBarcodeOperationCompleted = AddressOf Me.OnGetBranchStockFromBarcodeOperationCompleted
            End If
            Me.InvokeAsync("GetBranchStockFromBarcode", New Object() {Barcode, Branch}, Me.GetBranchStockFromBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBranchStockFromBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBranchStockFromBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBranchStockFromBarcodeCompleted(Me, New GetBranchStockFromBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/LabelService/LSX")>  _
    Partial Public Class Product
        
        Private responseCodeField As Integer
        
        Private responseMessageField As String
        
        Private nameField As String
        
        Private descriptionField As String
        
        Private colourField As String
        
        Private sizeField As String
        
        Private qtyField As Integer
        
        Private priceField As Double
        
        Private rRPField As Double
        
        Private wasField As Double
        
        '''<remarks/>
        Public Property ResponseCode() As Integer
            Get
                Return Me.responseCodeField
            End Get
            Set
                Me.responseCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ResponseMessage() As String
            Get
                Return Me.responseMessageField
            End Get
            Set
                Me.responseMessageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Colour() As String
            Get
                Return Me.colourField
            End Get
            Set
                Me.colourField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Size() As String
            Get
                Return Me.sizeField
            End Get
            Set
                Me.sizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property qty() As Integer
            Get
                Return Me.qtyField
            End Get
            Set
                Me.qtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Price() As Double
            Get
                Return Me.priceField
            End Get
            Set
                Me.priceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RRP() As Double
            Get
                Return Me.rRPField
            End Get
            Set
                Me.rRPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Was() As Double
            Get
                Return Me.wasField
            End Get
            Set
                Me.wasField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/LabelService/LSX")>  _
    Partial Public Class ImageData
        
        Private resultField As Integer
        
        Private dataField() As Byte
        
        '''<remarks/>
        Public Property Result() As Integer
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property Data() As Byte()
            Get
                Return Me.dataField
            End Get
            Set
                Me.dataField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDeliveryDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeliveryDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeliveryDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetManualDeliveryDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetManualDeliveryDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetManualDeliveryDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub isConnectionActiveCompletedEventHandler(ByVal sender As Object, ByVal e As isConnectionActiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isConnectionActiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Product
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Product)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckBarcode1CompletedEventHandler(ByVal sender As Object, ByVal e As CheckBarcode1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBarcode1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Product
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Product)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetBarcodesByProductNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetBarcodesByProductNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBarcodesByProductNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckServiceCompletedEventHandler(ByVal sender As Object, ByVal e As CheckServiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckServiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SearchProductWildcardsCompletedEventHandler(ByVal sender As Object, ByVal e As SearchProductWildcardsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SearchProductWildcardsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLabelFormatsCompletedEventHandler(ByVal sender As Object, ByVal e As GetLabelFormatsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLabelFormatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLabelFormatsByTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetLabelFormatsByTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLabelFormatsByTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub getLabelFormatTypeCompletedEventHandler(ByVal sender As Object, ByVal e As getLabelFormatTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLabelFormatTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLabelFormatCompletedEventHandler(ByVal sender As Object, ByVal e As GetLabelFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLabelFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLabelFormatImageCompletedEventHandler(ByVal sender As Object, ByVal e As GetLabelFormatImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLabelFormatImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ImageData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ImageData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLabelFormatNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetLabelFormatNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLabelFormatNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub InsertFormatCompletedEventHandler(ByVal sender As Object, ByVal e As InsertFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFormatCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteFormatCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReductionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetReductionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReductionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReductionDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetReductionDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReductionDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReductionWithStockByBranchCompletedEventHandler(ByVal sender As Object, ByVal e As GetReductionWithStockByBranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReductionWithStockByBranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReductionWithStockByBranchWithAltCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetReductionWithStockByBranchWithAltCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReductionWithStockByBranchWithAltCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetRmisReductionIDFromReductionNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetRmisReductionIDFromReductionNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRmisReductionIDFromReductionNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReductionSheetNumbersCompletedEventHandler(ByVal sender As Object, ByVal e As GetReductionSheetNumbersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReductionSheetNumbersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetBranchStockFromBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetBranchStockFromBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBranchStockFromBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
